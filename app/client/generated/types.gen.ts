// This file is auto-generated by @hey-api/openapi-ts

export type DeltaData = {
    Distance: Array<number>
    Speed: Array<number>
    Gap: Array<number>
}

export type DriverLapData = {
    driver: string
    team: string
    color: string
    total_laps: number
    avg_time: number
    min_time: number
    max_time: number
    median: number
    low_quartile: number
    high_quartile: number
    data: Array<LapTimingData>
}

export type DriverTelemetryComparison = {
    driver: string
    color: string
    comparison: DeltaData
}

export type DriverTelemetryData = {
    driver: string
    color: string
    telemetry: TelemetryData
}

export type ECompound = "SOFT" | "MEDIUM" | "HARD" | "INTERMEDIATE" | "WET" | "TEST_UNKNOWN"

export type HttpValidationError = {
    detail?: Array<ValidationError>
}

export type LapSelectionData = {
    driver_lap_data: Array<DriverLapData>
    low_decile: number
    high_decile: number
    min_time: number
    max_time: number
}

export type LapTimingData = {
    LapTime: number | null
    IsPB: boolean
    Sector1Time: number | null
    Sector2Time: number | null
    Sector3Time: number | null
    ST1: number | null
    ST2: number | null
    ST3: number | null
    Stint: number | null
    TyreLife: number | null
    Compound: ECompound
    IsOutlap: boolean
    IsInlap: boolean
    IsBestS1: boolean
    IsBestS2: boolean
    IsBestS3: boolean
    IsBestST1: boolean
    IsBestST2: boolean
    IsBestST3: boolean
    IsPBS1: boolean
    IsPBS2: boolean
    IsPBS3: boolean
}

export type PracticeResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    Time: number | null
    Gap: number | null
}

export type QualifyingResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    Q1Time: number | null
    Q2Time: number | null
    Q3Time: number | null
}

export type RaceResult = {
    Driver: string
    DriverNumber: string
    CountryCode: string
    TeamId: string
    TeamName: string
    GridPosition: number
    Status: string
    Points: number
    Time: number | null
    Gap: number | null
}

export type ScheduledEventCollection = {
    RoundNumber: Array<number>
    Country: Array<string>
    EventDate: Array<string | null>
    EventName: Array<string>
    OfficialEventName: Array<string>
    EventFormat: Array<string>
    Session1: Array<SessionIdentifier>
    Session1Date: Array<string | null>
    Session1DateUtc: Array<string | null>
    Session2: Array<SessionIdentifier>
    Session2Date: Array<string | null>
    Session2DateUtc: Array<string | null>
    Session3: Array<SessionIdentifier>
    Session3Date: Array<string | null>
    Session3DateUtc: Array<string | null>
    Session4: Array<SessionIdentifier | null>
    Session4Date: Array<string | null>
    Session4DateUtc: Array<string | null>
    Session5: Array<SessionIdentifier | null>
    Session5Date: Array<string | null>
    Session5DateUtc: Array<string | null>
    F1ApiSupport: Array<boolean>
}

export type SessionIdentifier =
    | "Race"
    | "Qualifying"
    | "Sprint"
    | "Sprint Qualifying"
    | "Sprint Shootout"
    | "Practice 1"
    | "Practice 2"
    | "Practice 3"

export type SessionQuery = {
    driver: string
    lap_filter: Array<number> | null
}

export type SessionQueryFilter = {
    queries: Array<SessionQuery>
}

export type SessionSummary = {
    weather: SessionWeather
    summary: Summary
}

export type SessionWeather = {
    air_temp_start: number
    air_temp_finish: number
    track_temp_start: number
    track_temp_finish: number
    humidity_start: number
    humidity_finish: number
}

export type Summary = {
    start_time: string | null
    finish_time: string | null
    round_name: string
    official_name: string
    session_type: string
}

export type TelemetryComparison = {
    reference: string
    telemetries: Array<DriverTelemetryComparison>
}

export type TelemetryData = {
    Throttle: Array<number>
    Gear: Array<number>
    Speed: Array<number>
    RPM: Array<number>
    Time: Array<number>
    RelativeDistance: Array<number>
    Distance: Array<number>
}

export type TelemetryRequest = {
    driver: string
    lap_filter: Array<number>
}

export type ValidationError = {
    loc: Array<string | number>
    msg: string
    type: string
}

export type GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostData = {
    body: SessionQueryFilter
    path: {
        year: string
        event: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/event/{event}/session/{session_identifier}/laps"
}

export type GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostError =
    GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostErrors[keyof GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostErrors]

export type GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostResponses = {
    /**
     * Successful Response
     */
    200: LapSelectionData
}

export type GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostResponse =
    GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostResponses[keyof GetSessionLaptimesSeasonYearEventEventSessionSessionIdentifierLapsPostResponses]

export type GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostData = {
    body: Array<TelemetryRequest>
    path: {
        year: string
        event: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/event/{event}/session/{session_identifier}/telemetry/comparison"
}

export type GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostError =
    GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostErrors[keyof GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostErrors]

export type GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostResponses = {
    /**
     * Successful Response
     */
    200: TelemetryComparison
}

export type GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostResponse =
    GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostResponses[keyof GetSessionTelemetrySeasonYearEventEventSessionSessionIdentifierTelemetryComparisonPostResponses]

export type GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetData =
    {
        body?: never
        path: {
            year: string
            event: string
            session_identifier: SessionIdentifier
            lap: string
            driver: string
        }
        query?: never
        url: "/season/{year}/event/{event}/session/{session_identifier}/lap/{lap}/driver/{driver}/telemetry"
    }

export type GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors =
    {
        /**
         * Validation Error
         */
        422: HttpValidationError
    }

export type GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetError =
    GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors[keyof GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetErrors]

export type GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses =
    {
        /**
         * Successful Response
         */
        200: DriverTelemetryData
    }

export type GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponse =
    GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses[keyof GetSessionLapDriverTelemetrySeasonYearEventEventSessionSessionIdentifierLapLapDriverDriverTelemetryGetResponses]

export type GetPracticeResultsSessionResultsPracticeGetData = {
    body?: never
    path?: never
    query: {
        year: string
        event_name: string
        practice: "Practice 1" | "Practice 2" | "Practice 3"
    }
    url: "/session/results/practice"
}

export type GetPracticeResultsSessionResultsPracticeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetPracticeResultsSessionResultsPracticeGetError =
    GetPracticeResultsSessionResultsPracticeGetErrors[keyof GetPracticeResultsSessionResultsPracticeGetErrors]

export type GetPracticeResultsSessionResultsPracticeGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PracticeResult>
}

export type GetPracticeResultsSessionResultsPracticeGetResponse =
    GetPracticeResultsSessionResultsPracticeGetResponses[keyof GetPracticeResultsSessionResultsPracticeGetResponses]

export type GetRaceResultsSessionResultsRaceGetData = {
    body?: never
    path?: never
    query: {
        year: string
        event_name: string
    }
    url: "/session/results/race"
}

export type GetRaceResultsSessionResultsRaceGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetRaceResultsSessionResultsRaceGetError =
    GetRaceResultsSessionResultsRaceGetErrors[keyof GetRaceResultsSessionResultsRaceGetErrors]

export type GetRaceResultsSessionResultsRaceGetResponses = {
    /**
     * Successful Response
     */
    200: Array<RaceResult>
}

export type GetRaceResultsSessionResultsRaceGetResponse =
    GetRaceResultsSessionResultsRaceGetResponses[keyof GetRaceResultsSessionResultsRaceGetResponses]

export type GetQualifyingResultsSessionResultsQualifyingGetData = {
    body?: never
    path?: never
    query: {
        year: string
        event_name: string
    }
    url: "/session/results/qualifying"
}

export type GetQualifyingResultsSessionResultsQualifyingGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetQualifyingResultsSessionResultsQualifyingGetError =
    GetQualifyingResultsSessionResultsQualifyingGetErrors[keyof GetQualifyingResultsSessionResultsQualifyingGetErrors]

export type GetQualifyingResultsSessionResultsQualifyingGetResponses = {
    /**
     * Successful Response
     */
    200: Array<QualifyingResult>
}

export type GetQualifyingResultsSessionResultsQualifyingGetResponse =
    GetQualifyingResultsSessionResultsQualifyingGetResponses[keyof GetQualifyingResultsSessionResultsQualifyingGetResponses]

export type GetSprintResultsSessionResultsSprintGetData = {
    body?: never
    path?: never
    query: {
        year: string
        event_name: string
    }
    url: "/session/results/sprint"
}

export type GetSprintResultsSessionResultsSprintGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSprintResultsSessionResultsSprintGetError =
    GetSprintResultsSessionResultsSprintGetErrors[keyof GetSprintResultsSessionResultsSprintGetErrors]

export type GetSprintResultsSessionResultsSprintGetResponses = {
    /**
     * Successful Response
     */
    200: Array<RaceResult>
}

export type GetSprintResultsSessionResultsSprintGetResponse =
    GetSprintResultsSessionResultsSprintGetResponses[keyof GetSprintResultsSessionResultsSprintGetResponses]

export type YearEventsSeasonYearGetData = {
    body?: never
    path: {
        year: number
    }
    query?: never
    url: "/season/{year}"
}

export type YearEventsSeasonYearGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type YearEventsSeasonYearGetError = YearEventsSeasonYearGetErrors[keyof YearEventsSeasonYearGetErrors]

export type YearEventsSeasonYearGetResponses = {
    /**
     * Successful Response
     */
    200: ScheduledEventCollection
}

export type YearEventsSeasonYearGetResponse = YearEventsSeasonYearGetResponses[keyof YearEventsSeasonYearGetResponses]

export type YearTelemetryEventsSeasonYearTelemetryGetData = {
    body?: never
    path: {
        year: number
    }
    query?: never
    url: "/season/{year}/telemetry"
}

export type YearTelemetryEventsSeasonYearTelemetryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type YearTelemetryEventsSeasonYearTelemetryGetError =
    YearTelemetryEventsSeasonYearTelemetryGetErrors[keyof YearTelemetryEventsSeasonYearTelemetryGetErrors]

export type YearTelemetryEventsSeasonYearTelemetryGetResponses = {
    /**
     * Successful Response
     */
    200: ScheduledEventCollection
}

export type YearTelemetryEventsSeasonYearTelemetryGetResponse =
    YearTelemetryEventsSeasonYearTelemetryGetResponses[keyof YearTelemetryEventsSeasonYearTelemetryGetResponses]

export type GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetData = {
    body?: never
    path: {
        year: number
        event_name: string
        session_identifier: SessionIdentifier
    }
    query?: never
    url: "/season/{year}/event/{event_name}/session/{session_identifier}/summary"
}

export type GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError
}

export type GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetError =
    GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetErrors[keyof GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetErrors]

export type GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: SessionSummary
}

export type GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetResponse =
    GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetResponses[keyof GetSessionSummarySeasonYearEventEventNameSessionSessionIdentifierSummaryGetResponses]
